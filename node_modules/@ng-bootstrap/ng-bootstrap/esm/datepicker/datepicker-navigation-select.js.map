{"version":3,"sources":["datepicker/datepicker-navigation-select.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAA2B,MAAM,eAAe;OACvF,EAAC,OAAO,EAAC,MAAM,YAAY;OAC3B,EAAC,SAAS,EAAC,MAAM,cAAc;OAC/B,EAAC,iBAAiB,EAAC,MAAM,mBAAmB;OAC5C,EAAC,WAAW,EAAC,MAAM,gBAAgB;AAsB1C;IAUE,YAAmB,IAAuB,EAAE,QAAqB;QAA9C,SAAI,GAAJ,IAAI,CAAmB;QAR1C,UAAK,GAAa,EAAE,CAAC;QAMX,WAAM,GAAG,IAAI,YAAY,EAAW,CAAC;QAEsB,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;IAAC,CAAC;IAE1G,WAAW,CAAC,OAAsB;QAChC,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC7C,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC;IACH,CAAC;IAED,WAAW,CAAC,KAAa,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAElG,UAAU,CAAC,IAAY,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAExF,cAAc;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,EAAC,MAAM,EAAE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,GAAG,CAAC,EAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;IACjG,CAAC;AACH,CAAC;AArBC;IAAC,KAAK,EAAE;;2DAAA;AACR;IAAC,KAAK,EAAE;;8DAAA;AACR;IAAC,KAAK,EAAE;;8DAAA;AAER;IAAC,MAAM,EAAE;;6DAAA;AA5BX;IAAC,SAAS,CAAC;QACT,QAAQ,EAAE,kCAAkC;QAC5C,MAAM,EAAE,CAAC;;;;;;;;GAQR,CAAC;QACF,QAAQ,EAAE;;;cAGE;YACR;;;GAGH,CAAE,mFAAmF;KACvF,CAAC;;iCAAA;AA0BD","file":"datepicker/datepicker-navigation-select.js","sourcesContent":["import {Component, Input, Output, EventEmitter, OnChanges, SimpleChanges} from '@angular/core';\nimport {NgbDate} from './ngb-date';\nimport {toInteger} from '../util/util';\nimport {NgbDatepickerI18n} from './datepicker-i18n';\nimport {NgbCalendar} from './ngb-calendar';\n\n@Component({\n  selector: 'ngb-datepicker-navigation-select',\n  styles: [`\n    select {\n      /* to align with btn-sm */\n      padding: 0.25rem 0.5rem;\n      font-size: 0.875rem;      \n      line-height: 1.25;\n      width: 50%;\n    }\n  `],\n  template: `\n    <select class=\"custom-select d-inline-block\" [value]=\"date.month\" (change)=\"changeMonth($event.target.value)\">\n      <option *ngFor=\"let m of months\" [value]=\"m\">{{ i18n.getMonthName(m) }}</option>\n    </select>` +\n      `<select class=\"custom-select d-inline-block\" [value]=\"date.year\" (change)=\"changeYear($event.target.value)\">\n      <option *ngFor=\"let y of years\" [value]=\"y\">{{ y }}</option>\n    </select> \n  `  // template needs to be formatted in a certain way so we don't add empty text nodes\n})\nexport class NgbDatepickerNavigationSelect implements OnChanges {\n  months: number[];\n  years: number[] = [];\n\n  @Input() date: NgbDate;\n  @Input() maxYear: number;\n  @Input() minYear: number;\n\n  @Output() select = new EventEmitter<NgbDate>();\n\n  constructor(public i18n: NgbDatepickerI18n, calendar: NgbCalendar) { this.months = calendar.getMonths(); }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['maxYear'] || changes['minYear']) {\n      this._generateYears();\n    }\n  }\n\n  changeMonth(month: string) { this.select.emit(new NgbDate(this.date.year, toInteger(month), 1)); }\n\n  changeYear(year: string) { this.select.emit(new NgbDate(toInteger(year), this.date.month, 1)); }\n\n  private _generateYears() {\n    this.years = Array.from({length: this.maxYear - this.minYear + 1}, (e, i) => this.minYear + i);\n  }\n}\n"],"sourceRoot":"/source/"}