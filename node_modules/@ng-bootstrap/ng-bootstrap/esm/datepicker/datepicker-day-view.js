var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input } from '@angular/core';
export let NgbDatepickerDayView = class NgbDatepickerDayView {
    isMuted() { return this.date.month !== this.currentMonth || this.disabled; }
};
__decorate([
    Input(), 
    __metadata('design:type', Number)
], NgbDatepickerDayView.prototype, "currentMonth", void 0);
__decorate([
    Input(), 
    __metadata('design:type', Object)
], NgbDatepickerDayView.prototype, "date", void 0);
__decorate([
    Input(), 
    __metadata('design:type', Boolean)
], NgbDatepickerDayView.prototype, "disabled", void 0);
__decorate([
    Input(), 
    __metadata('design:type', Boolean)
], NgbDatepickerDayView.prototype, "selected", void 0);
NgbDatepickerDayView = __decorate([
    Component({
        selector: '[ngbDatepickerDayView]',
        styles: [`
    :host {      
      text-align: center;
      padding: 0.185rem 0.25rem;      
      border-radius: 0.25rem;
    }
  `],
        host: { '[class.bg-primary]': 'selected', '[class.text-muted]': 'isMuted()' },
        template: `{{ date.day }}`
    }), 
    __metadata('design:paramtypes', [])
], NgbDatepickerDayView);

//# sourceMappingURL=datepicker-day-view.js.map
