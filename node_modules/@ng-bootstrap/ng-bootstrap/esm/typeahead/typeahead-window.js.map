{"version":3,"sources":["typeahead/typeahead-window.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,WAAW,EAAC,MAAM,eAAe;OAE1E,EAAC,QAAQ,EAAC,MAAM,cAAc;AAmCrC;IAAA;QACE,cAAS,GAAG,CAAC,CAAC;QAYd;;;WAGG;QACM,cAAS,GAAG,QAAQ,CAAC;QAO9B;;WAEG;QACe,gBAAW,GAAG,IAAI,YAAY,EAAE,CAAC;IAiBrD,CAAC;IAfC,SAAS,KAAK,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAEpD;;OAEG;IACH,UAAU,CAAC,SAAiB,IAAI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC;IAE7D,IAAI,KAAK,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IAEvE,IAAI,KAAK,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAElG;;OAEG;IACH,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC;AAtCC;IAAC,KAAK,EAAE;;mDAAA;AAKR;IAAC,KAAK,EAAE;;gDAAA;AAMR;IAAC,KAAK,EAAE;;qDAAA;AAKR;IAAC,KAAK,EAAE;;0DAAA;AAKR;IAAC,MAAM,CAAC,QAAQ,CAAC;;uDAAA;AA7CnB;IAAC,SAAS,CAAC;QACT,QAAQ,EAAE,sBAAsB;QAChC,QAAQ,EAAE,oBAAoB;QAC9B,IAAI,EAAE,EAAC,OAAO,EAAE,eAAe,EAAE,OAAO,EAAE,gBAAgB,EAAC;QAC3D,QAAQ,EAAE;;;;;;;;;;;;GAYT;KACF,CAAC;;sBAAA;AA6CD","file":"typeahead/typeahead-window.js","sourcesContent":["import {Component, Input, Output, EventEmitter, TemplateRef} from '@angular/core';\n\nimport {toString} from '../util/util';\n\n/**\n * Context for the typeahead result template in case you want to override the default one\n */\nexport interface ResultTemplateContext {\n  /**\n   * Your typeahead result data model\n   */\n  result: any;\n\n  /**\n   * Search term from the input used to get current result\n   */\n  term: string;\n}\n\n@Component({\n  selector: 'ngb-typeahead-window',\n  exportAs: 'ngbTypeaheadWindow',\n  host: {'class': 'dropdown-menu', 'style': 'display: block'},\n  template: `\n    <template #rt let-result=\"result\" let-term=\"term\" let-formatter=\"formatter\">\n      <ngb-highlight [result]=\"formatter(result)\" [term]=\"term\"></ngb-highlight>\n    </template>\n    <template ngFor [ngForOf]=\"results\" let-result let-idx=\"index\">\n      <button type=\"button\" class=\"dropdown-item\" [class.active]=\"idx === activeIdx\" \n        (mouseenter)=\"markActive(idx)\" \n        (click)=\"select(result)\">\n          <template [ngTemplateOutlet]=\"resultTemplate || rt\" \n          [ngOutletContext]=\"{result: result, term: term, formatter: formatter}\"></template>\n      </button>\n    </template>\n  `\n})\nexport class NgbTypeaheadWindow {\n  activeIdx = 0;\n\n  /**\n   * Typeahead match results to be displayed\n   */\n  @Input() results;\n\n  /**\n   * Search term used to get current results\n   */\n  @Input() term: string;\n\n  /**\n   * A function used to format a given result before display. This function should return a formatted string without any\n   * HTML markup\n   */\n  @Input() formatter = toString;\n\n  /**\n   * A template to override a matching result default display\n   */\n  @Input() resultTemplate: TemplateRef<ResultTemplateContext>;\n\n  /**\n   * Event raised when user selects a particular result row\n   */\n  @Output('select') selectEvent = new EventEmitter();\n\n  getActive() { return this.results[this.activeIdx]; }\n\n  /**\n   * @internal\n   */\n  markActive(activeIdx: number) { this.activeIdx = activeIdx; }\n\n  next() { this.activeIdx = (this.activeIdx + 1) % this.results.length; }\n\n  prev() { this.activeIdx = (this.activeIdx === 0 ? this.results.length - 1 : this.activeIdx - 1); }\n\n  /**\n   * @internal\n   */\n  select(item) { this.selectEvent.emit(item); }\n}\n"],"sourceRoot":"/source/"}