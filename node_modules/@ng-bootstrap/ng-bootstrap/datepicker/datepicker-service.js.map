{"version":3,"sources":["datepicker/datepicker-service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA0B,gBAAgB,CAAC,CAAA;AAC3C,yBAAsB,YAAY,CAAC,CAAA;AAEnC,qBAAyB,eAAe,CAAC,CAAA;AAGzC;IACE,8BAAoB,SAAsB;QAAtB,cAAS,GAAT,SAAS,CAAa;IAAG,CAAC;IAE9C,qDAAsB,GAAtB,UACI,IAAa,EAAE,OAAgB,EAAE,OAAgB,EAAE,cAAsB,EACzE,YAAwC;QAC1C,IAAM,KAAK,GAAmB,EAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAC,CAAC;QAE7F,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QAEpD,kBAAkB;QAClB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC3D,IAAM,IAAI,GAAmB,EAAE,CAAC;YAEhC,gBAAgB;YAChB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBACzD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACZ,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;gBACvD,CAAC;gBAED,IAAM,OAAO,GAAG,IAAI,kBAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;gBAE7D,IAAI,QAAQ,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC3F,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,YAAY,CAAC,CAAC,CAAC;oBAC9B,QAAQ,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;gBACnC,CAAC;gBAED,IAAI,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAC,CAAC,CAAC;gBAE/C,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACtC,CAAC;YAED,KAAK,CAAC,KAAK,CAAC,IAAI,CACZ,EAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,kBAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAtB,CAAsB,CAAC,EAAE,cAAc,CAAC,EAAE,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;QACnH,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAEO,gDAAiB,GAAzB,UAA0B,IAAa,EAAE,cAAsB;QAA/D,iBAkBC;QAjBC,IAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC;QAChC,IAAI,KAAK,GAAG,IAAI,kBAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QACzD,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAE9C,IAAM,0CAA0C,GAC5C,cAAQ,MAAM,CAAC,KAAK,CAAC,KAAK,KAAK,SAAS,CAAC,KAAK,IAAI,cAAc,KAAK,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAE7G,IAAM,8CAA8C,GAChD,cAAQ,MAAM,CAAC,KAAK,CAAC,KAAK,KAAK,YAAY,IAAI,cAAc,KAAK,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAE1G,qBAAqB;QACrB,OAAO,CAAC,8CAA8C,EAAE,IAAI,CAAC,0CAA0C,EAAE,EAAE,CAAC;YAC1G,KAAK,GAAG,IAAI,kBAAO,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC;YACpE,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAChD,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IA1DH;QAAC,iBAAU,EAAE;;4BAAA;IA2Db,2BAAC;AAAD,CA1DA,AA0DC,IAAA;AA1DY,4BAAoB,uBA0DhC,CAAA","file":"datepicker/datepicker-service.js","sourcesContent":["import {NgbCalendar} from './ngb-calendar';\nimport {NgbDate} from './ngb-date';\nimport {MonthViewModel, DayViewModel} from './datepicker-view-model';\nimport {Injectable} from '@angular/core';\n\n@Injectable()\nexport class NgbDatepickerService {\n  constructor(private _calendar: NgbCalendar) {}\n\n  generateMonthViewModel(\n      date: NgbDate, minDate: NgbDate, maxDate: NgbDate, firstDayOfWeek: number,\n      markDisabled: (date: NgbDate) => boolean): MonthViewModel {\n    const month: MonthViewModel = {number: date.month, year: date.year, weeks: [], weekdays: []};\n\n    date = this._getFirstViewDate(date, firstDayOfWeek);\n\n    // month has weeks\n    for (let w = 0; w < this._calendar.getWeeksPerMonth(); w++) {\n      const days: DayViewModel[] = [];\n\n      // week has days\n      for (let d = 0; d < this._calendar.getDaysPerWeek(); d++) {\n        if (w === 0) {\n          month.weekdays.push(this._calendar.getWeekday(date));\n        }\n\n        const newDate = new NgbDate(date.year, date.month, date.day);\n\n        let disabled = (minDate && newDate.before(minDate)) || (maxDate && newDate.after(maxDate));\n        if (!disabled && markDisabled) {\n          disabled = markDisabled(newDate);\n        }\n\n        days.push({date: newDate, disabled: disabled});\n\n        date = this._calendar.getNext(date);\n      }\n\n      month.weeks.push(\n          {number: this._calendar.getWeekNumber(days.map(day => NgbDate.from(day.date)), firstDayOfWeek), days: days});\n    }\n\n    return month;\n  }\n\n  private _getFirstViewDate(date: NgbDate, firstDayOfWeek: number): NgbDate {\n    const currentMonth = date.month;\n    let today = new NgbDate(date.year, date.month, date.day);\n    let yesterday = this._calendar.getPrev(today);\n\n    const firstDayOfCurrentMonthIsAlsoFirstDayOfWeek =\n        () => { return today.month !== yesterday.month && firstDayOfWeek === this._calendar.getWeekday(today); };\n\n    const reachedTheFirstDayOfTheLastWeekOfPreviousMonth =\n        () => { return today.month !== currentMonth && firstDayOfWeek === this._calendar.getWeekday(today); };\n\n    // going back in time\n    while (!reachedTheFirstDayOfTheLastWeekOfPreviousMonth() && !firstDayOfCurrentMonthIsAlsoFirstDayOfWeek()) {\n      today = new NgbDate(yesterday.year, yesterday.month, yesterday.day);\n      yesterday = this._calendar.getPrev(yesterday);\n    }\n\n    return today;\n  }\n}\n"],"sourceRoot":"/source/"}